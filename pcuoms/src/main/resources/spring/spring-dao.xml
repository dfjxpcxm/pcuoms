<?xml version="1.0" encoding="UTF-8"?>
<beans
    xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd"
    default-lazy-init="true"
>

	 <bean id="configTool" class="com.seaboxdata.core.util.config.ConfigTool">
        <property name="locations">
            <list>
                <value>classpath:/properties/jdbc.properties</value>
<!--                <value>classpath:/properties/config.properties</value>-->
            </list>
        </property>
    </bean>

    <!-- MyBatis整合 Start -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />

        <property name="initialSize" value="5" />
        <property name="maxActive" value="100" />
        <property name="minIdle" value="10" />
        <property name="maxWait" value="60000" />
        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testOnBorrow" value="true" />
        <property name="testOnReturn" value="true" />
        <property name="testWhileIdle" value="true" />
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <property name="removeAbandoned" value="true" />
        <property name="removeAbandonedTimeout" value="1800" />
        <property name="logAbandoned" value="true" />
        <!-- 开启Druid的监控统计功能 -->
        <property name="filters" value="stat" />
    </bean>
    
    
    
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="mapperLocations" value="classpath*:com/seaboxdata/**/*Mapper.xml" />
        <property name="configLocation" value="classpath:/mybatis/mybatis-config.xml" />
        <property name="dataSource" ref="dataSource" />
        <property name="plugins">
            <array>
                <bean class="com.seaboxdata.core.base.mybatis.SqlInterceptor" />
            </array>
        </property>
    </bean>
    
    <!-- 查找类路径下的映射器并自动将它们创建成MapperFactoryBean-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.seaboxdata" />
	<property name="markerInterface" value="com.seaboxdata.core.base.ISysBaseDao"/>
       <!-- <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />-->
       <!-- <property name="annotationClass" value="org.springframework.stereotype.Repository" />-->
    </bean>
    <!-- MyBatis整合 End -->
    
    <!--配置事务 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" /> 
    </bean>
    <!-- enable transaction demarcation with annotations 
    <tx:annotation-driven />-->
	<!-- enable transaction annotation support -->
	<tx:annotation-driven transaction-manager="transactionManager" />
    
    <!--
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">  
        <property name="dataSource">  
            <ref bean="dataSource" />  
        </property>  
    </bean>
    -->
    <!-- Activates scanning of @Repository, @Service, @Controller and @Component -->

   <!--<import resource="application-service.xml"/>-->
    
</beans>